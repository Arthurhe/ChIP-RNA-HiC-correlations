16.08.25
##downloaded the "Post-alignment and Duplicate Filtering Data" txt.gz file from GSE63525(liberman cell)
the format is: 
read_name    strand1    chromosome1    position1    fragment-index1    strand2    chromosome2    position2    fragment-index2    mapq1    mapq2
where
read_name = the name of the read pair as seen in the FASTQ files
strand = the strand that the read maps to (0=forward, 16=reverse)
chromosome = the chromosome that the read maps to ([1-22,X,Y,MT] for human (b37 reference genome) or [chr1-chr19,chrX,chrY,chrM] for mouse (mm9 reference genome))
position = the position on the chromosome that the read maps to
fragment-index = the index of the interval demarcated by restrictions sites in the genome, starting with 0 for the interval preceding the first restriction site
mapq = the mapping quality score returned by BWA 

##the homer intake format is (for summary.txt)
Hi-C Summary Format (columns):
1. Read Name (can be blank)
2. chromosome for read 1
3. positions for read 1 (5' end of read, one-indexed)
4. strand of read 1 (+ or -)
5. chromosome for read 2
6. positions for read 2 (5' end of read, one-indexed)
7. strand of read 2 (+ or -)

##Process GSE63525 file to fit HOMER standard:
for i in *gz; do gunzip -c $i | awk 'BEGIN{OFS="\t";FS=" "} {print $1,"chr"$3,$4,$2,"chr"$7,$8,$6}' >> GM12878_summary.txt ; done &
cat K562_summary.txt | awk 'BEGIN{OFS="\t"} {if($4==0){print $1,$2,$3,"+",$5,$6,$7} else {print $1,$2,$3,"-",$5,$6,$7}}'| awk 'BEGIN{OFS="\t"} {if($7==0){print $1,$2,$3,$4,$5,$6,"+"} else {print $1,$2,$3,$4,$5,$6,"-"}}' > K562_summary_strandCorrected.txt &
rm GM12878_summary.txt

##Run HOMER command #first on K562/GM12878
tag=K562
tag=GM12878
makeTagDirectory ${tag} -format HiCsummary ${tag}_summary_strandCorrected.txt 
analyzeHiC ${tag}/ -res 25000 -bgonly #using multiple cpu cause memory explosion
analyzeHiC ${tag}/ -res 12500 -superRes 25000 -nomatrix -center -maxDist 10000000 -minDist 25000 -cpu 2 -interactions ${tag}_25K_center_interactions.txt
awk 'BEGIN{OFS="\t";FS="\t"}$3==$9{if($10>0){print $3,$10,$4,$14}else{print $3,0,$4,$14}}' ${tag}_25K_center_interactions.txt | sort -V -k1.4 -k2 > ${tag}_25K_center_interactions_simplified.txt #each bin is constant 25K size	#chr #start1 #start2 #distance

##make matrix
tagaddress="/home/ahe/Analysis/201608_HicChipRnaCor/data/HiC/GM12878"
for i in {{1..21},X,Y}
do analyzeHiC ${tagaddress}/GM12878 -res 25000 -chr chr${i} -raw > /home/ahe/Analysis/201608_HicChipRnaCor/data/matrix/GM12878_combined/WT_chr${i}_matrix_25K.txt
done

##KR norm matrix and find domain
for i in *25K.txt; do i=${i%.*}; Rscript --vanilla /home/ahe/Analysis/Rfunction_package/KRnormalize_forHiC.R ${i}.txt 1 2 0.995 ${i}_KR.txt; done
rm manifest.txt; for chr in {{1..21},X,Y}; do chr=chr${chr}; i=GM_${chr}_matrix_25K_KR.txt; echo ${chr},${i} >> manifest.txt ;done
Rscript --vanilla ~/Analysis/Rfunction_package/domain_calling.R manifest.txt 0 0 25000 150000 10000000 /home/ahe/Analysis/201608_HicChipRnaCor/data/mydomain/GM
awk 'BEGIN{OFS="\t";FS="\t"}NR==1 || $5=="TRUE"{print $0}' GM_all_domains.bed >  GM_all_elemental_domains.bed

#draw domain
rm manifest_heatmap.txt
for chr in  {{1..21},X,Y}; do chr=chr${chr}; i=GM_${chr}_matrix_25K_KR.txt; echo ${chr},${i},/home/ahe/Analysis/201608_HicChipRnaCor/data/mydomain/GM_${chr}_domains.bed,none,all,all >> manifest_heatmap.txt; done
Rscript --vanilla ~/Analysis/Rfunction_package/domain_draw_heatmap_group.R manifest_heatmap.txt 0 0 50000 4 5 = 1 /home/ahe/Analysis/201608_HicChipRnaCor/data/mydomain/pdfs/GM

##Generate shuffled negative regions samples (entire loop body + anchors)
rm *temp*
i=1
tot=$(($(wc -l ${tag}_all_elemental_domains.bed | awk '{print $1}')*3/2))
sed 1d ${tag}_all_elemental_domains.bed > ${tag}_all_elemental_domains_temp.bed
cp ${tag}_all_elemental_domains_temp.bed temp_include_pos
while [ $i -le $tot ]
do
bedtools shuffle -i ${tag}_all_elemental_domains_temp.bed -g ~/Analysis/genomeFiles/GenomeSize_hg19_essential.txt > temp_new
sort -V -k1.4 -k2 temp_new | awk 'BEGIN{OFS="\t";FS="\t"}{print $1,$2,$2+50000,$3,$3+50000,NR}' > temp_new_anchor
sort -V -k1.4 -k2 temp_include_pos | awk 'BEGIN{OFS="\t";FS="\t"}{print $1,$2,$2+25000,$3,$3+25000,NR}' > temp_existing_anchor
bedtools intersect -sorted -wa -wb -a temp_new_anchor -b temp_existing_anchor | awk 'BEGIN{OFS="\t";FS="\t"}{print $1,$4,$5,$6,$12}' | sort -V -k1.4 -k2 > temp_new_1pass
awk 'BEGIN{OFS="\t";FS="\t"}NR==FNR{start[$6]=$4;next}FNR!=NR{if(start[$5]>$2-25000 && start[$5]<$3){print $4,$5}}' temp_existing_anchor temp_new_1pass > discard_list
awk 'BEGIN{OFS="\t";FS="\t"}NR==FNR{discard[$1]=1;next}FNR!=NR{if(!discard[$6]==1){print $1,$2+12500,$4+12500,$4-$2}}' discard_list temp_new_anchor > temp_new_filtered
cat temp_new_filtered >> temp_include_pos    #append new sample to all sample list
cat temp_new_filtered >> temp
i=$(wc -l temp | awk '{print $1}')
echo $i
done
awk 'BEGIN{OFS="\t";FS="\t"}FNR!=NR||NR==1{print $0}' ${tag}_all_elemental_domains.bed temp > ${tag}_neg_elemental_domains.bed
rm *temp* discard_list




###########################
#the following are used for interaction analysis

##Generate shuffled negative regions samples (entire loop body + anchors)
rm *temp*
i=1
tot=$(($(wc -l ${tag}_25K_center_interactions_simplified.txt | awk '{print $1}')*3/2))
cp ${tag}_25K_center_interactions_simplified.txt temp_include_pos
while [ $i -le $tot ]
do
bedtools shuffle -i ${tag}_25K_center_interactions_simplified.txt -g ~/Analysis/genomeFiles/GenomeSize_hg19_essential.txt > temp_new
sort -V -k1.4 -k2 temp_new | awk 'BEGIN{OFS="\t";FS="\t"}{print $1,$2,$2+50000,$3,$3+50000,NR}' > temp_new_anchor
sort -V -k1.4 -k2 temp_include_pos | awk 'BEGIN{OFS="\t";FS="\t"}{print $1,$2,$2+25000,$3,$3+25000,NR}' > temp_existing_anchor
bedtools intersect -sorted -wa -wb -a temp_new_anchor -b temp_existing_anchor | awk 'BEGIN{OFS="\t";FS="\t"}{print $1,$4,$5,$6,$12}' | sort -V -k1.4 -k2 > temp_new_1pass
awk 'BEGIN{OFS="\t";FS="\t"}NR==FNR{start[$6]=$4;next}FNR!=NR{if(start[$5]>$2-25000 && start[$5]<$3){print $4,$5}}' temp_existing_anchor temp_new_1pass > discard_list
awk 'BEGIN{OFS="\t";FS="\t"}NR==FNR{discard[$1]=1;next}FNR!=NR{if(!discard[$6]==1){print $1,$2+12500,$4+12500,$4-$2}}' discard_list temp_new_anchor > temp_new_filtered
cat temp_new_filtered >> temp_include_pos    #append new sample to all sample list
cat temp_new_filtered >> temp
i=$(wc -l temp | awk '{print $1}')
echo $i
done
mv temp ${tag}_25K_negative_loops.txt
rm *temp*

##Generate short shuffled negative regions samples that don't coverlap with any short loop regions (shreshold 0.2M)
awk 'BEGIN{OFS="\t";FS="\t"}{if($3-$2<200000){print $0}}' ${tag}_25K_center_interactions_simplified.txt >  ${tag}_25K_center_le200K_interactions_simplified.txt
bedtools shuffle -i ${tag}_25K_center_le200K_interactions_simplified.txt -excl ${tag}_25K_center_le200K_interactions_simplified.txt -g ~/Analysis/genomeFiles/GenomeSize_hg19_essential.txt > ${tag}_25K_nonOverlap_le200K_negative_loops.txt

##Generate shuffled negative bin samples (anchors sites)
awk 'BEGIN{OFS="\t";FS="\t"}$3==$9{if($10>0){printf "%s\t%s\t%s\t%s\n%s\t%s\t%s\t%s\n",$9,$10,$11,"A-"NR-1,$3,$4,$5,"B-"NR-1}else{printf "%s\t%s\t%s\t%s\n%s\t%s\t%s\t%s\n",$9,0,$11,"A-"NR-1,$3,$4,$5,"B-"NR-1}}' ${tag}_25K_center_interactions.txt > ${tag}_25K_active_anchors.bed
awk 'BEGIN{OFS="\t";FS="\t"}{pos=int($2/12500); if(exist[$1,pos]==1) {start[$1,pos]+=$2;count[$1,pos]+=1} else {exist[$1,pos]=1;start[$1,pos]=$2;count[$1,pos]=1;chr[$1,pos]=$1;next}} END {for (i in exist){thisstart=int(start[i]/count[i]);print chr[i],thisstart,thisstart+25000,count[i]}}' ${tag}_25K_active_anchors.bed |sort -V -k1.4 -k2> ${tag}_25K_12.5Kres_active_unique_anchors.bed
awk 'BEGIN{OFS="\t";FS="\t"}{sum += $4} END {print sum}' ${tag}_25K_12.5Kres_active_unique_anchors.bed

rm *temp*
i=1
tot=$(($(wc -l ${tag}_25K_12.5Kres_active_unique_anchors.bed | awk '{print $1}')))
cp ${tag}_25K_12.5Kres_active_unique_anchors.bed temp_include_pos
while [ $i -le $tot ]
do
now=$(($(wc -l temp_include_pos | awk '{print $1}')))
bedtools random -l 25000 -g ~/Analysis/genomeFiles/GenomeSize_hg19_essential.txt > temp_new
bedtools intersect -v -f 0.1 -F 0.1 -a temp_new -b temp_include_pos > temp_new_filtered1
awk 'BEGIN{OFS="\t";FS="\t"}{pos=int($2/12500); if(exist[$1,pos]==1) {start[$1,pos]+=$2;count[$1,pos]+=1} else {exist[$1,pos]=1;start[$1,pos]=$2;count[$1,pos]=1;chr[$1,pos]=$1;next}} END {for (i in exist){thisstart=int(start[i]/count[i]);print chr[i],thisstart,thisstart+25000,0}}' temp_new_filtered1 > temp_new_filtered2
cat temp_new_filtered2 >> temp_include_pos    #append new sample to all sample list
cat temp_new_filtered2 >> temp
i=$(wc -l temp | awk '{print $1}')
echo $i
if [ $now -eq $(($(wc -l temp_include_pos | awk '{print $1}'))) ]; then break; fi
done
mv temp ${tag}_25K_12.5Kres_negative_anchors.bed
rm *temp*

